            df["Setter"] = "Team"

        if "Date" in df.columns:
            df["Date"] = pd.to_datetime(df["Date"], errors="coerce")

        numeric_cols = [col for col in df.columns if col not in ("Date", "Setter")]
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)

        return df
    except Exception as e:
        st.error(f"Erreur chargement data: {e}")
        return pd.DataFrame()


@st.cache_data(ttl=900)
def load_ghl_dataframe():
    settings = GHLSettings.from_streamlit(st.secrets)
    client = GHLClient(settings)
    df = build_dashboard_dataframe(client, settings)
    if not df.empty and "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"], errors="coerce")
    return df


def load_data():
    try:
        df_ghl = load_ghl_dataframe()
        if not df_ghl.empty:
            st.session_state["data_source"] = "GHL API"
            return df_ghl
    except GHLConfigurationError as cfg_err:
        logger.info("Configuration GHL incomplËte: %s", cfg_err)
        st.info("Configuration GHL absente ou incomplËte. Passage sur Google Sheets.")
    except Exception as exc:
        logger.exception("Erreur lors de la rÈcupÈration GHL", exc_info=exc)
        st.warning("Impossible de rÈcupÈrer les donnÈes via l'API GHL. Utilisation des donnÈes de secours.")

    df_sheet = load_google_sheet_data()
    if not df_sheet.empty:
        st.session_state["data_source"] = "Google Sheets"
    else:
        st.session_state["data_source"] = "Aucune"
    return df_sheet

# --- KPIs avec design professionnel ---
def display_kpis(df, df_filtered):
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_rev_filtered = df_filtered["Revenue_Generated"].sum() if "Revenue_Generated" in df_filtered.columns and len(df_filtered) > 0 else 0
        st.markdown(f"""
        <div class='metric-card'>
            <h2>‚Ç¨{total_rev_filtered:,.0f}</h2>
            <p>Total Revenue</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        total_leads = df_filtered["Total_Leads"].sum() if "Total_Leads" in df_filtered.columns and len(df_filtered) > 0 else 0
        st.markdown(f"""
        <div class='metric-card'>
            <h2>{int(total_leads)}</h2>
            <p>Total Leads</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        total_closes = df_filtered["Total_Closes"].sum() if "Total_Closes" in df_filtered.columns and len(df_filtered) > 0 else 0
        st.markdown(f"""
        <div class='metric-card'>
            <h2>{int(total_closes)}</h2>
            <p>Total Closes</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        # Calcul du Close Rate
        if "Total_Leads" in df_filtered.columns and "Total_Closes" in df_filtered.columns and len(df_filtered) > 0:
            total_leads_calc = df_filtered["Total_Leads"].sum()
            total_closes_calc = df_filtered["Total_Closes"].sum()
            avg_rate = (total_closes_calc / total_leads_calc * 100) if total_leads_calc > 0 else 0
        else:
            avg_rate = 0
        
        st.markdown(f"""
        <div class='metric-card'>
            <h2>{avg_rate:.1f}%</h2>
            <p>Avg Close Rate</p>
        </div>
        """, unsafe_allow_html=True)


# --- Graphiques avec couleurs rouges dominantes ---
def revenue_trend_plot(df_filtered):
    if "Date" not in df_filtered or "Revenue_Generated" not in df_filtered:
        st.info("Revenue trend: missing columns.")
        return
    
    df_t = df_filtered.sort_values("Date")
    fig = px.line(df_t, x="Date", y="Revenue_Generated", markers=True,
                  title="üí∞ Revenue Trend",
                  labels={"Revenue_Generated": "Revenue (‚Ç¨)", "Date": "Date"},
                  color_discrete_sequence=["#C53030"])
    
    # Styling pour correspondre √† l'image
    fig.update_layout(
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='white',
        title_font_size=18,
        title_font_color='#2D3748',
        font=dict(color='#4A5568'),
        xaxis=dict(gridcolor='#E2E8F0'),
        yaxis=dict(gridcolor='#E2E8F0')
    )
    fig.update_traces(line=dict(width=3), marker=dict(size=6))
    
    st.plotly_chart(fig, use_container_width=True)


def leads_by_source_plot(df_filtered):
    source_cols = [c for c in df_filtered.columns if c.startswith("From_")]
    if not source_cols:
        st.info("No source data.")
        return
    
    df_sum = df_filtered[source_cols].sum().reset_index()
    df_sum.columns = ["Source", "Leads"]
    df_sum["Source"] = df_sum["Source"].str.replace("From_", "")
    
    # Couleurs rouge/orange vari√©es pour am√©liorer la visibilit√©
    colors = ["#DC2626", "#EA580C", "#D97706", "#CA8A04", "#65A30D"]
    
    fig = px.bar(df_sum, x="Source", y="Leads", text="Leads",
                 title="üéØ Leads by Source",
                 color="Source",
                 color_discrete_sequence=colors)
    
    fig.update_traces(textposition="outside", textfont_size=12)
    fig.update_layout(
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='white',
        title_font_size=18,
        title_font_color='#2D3748',
        font=dict(color='#4A5568'),
        xaxis=dict(gridcolor='#E2E8F0'),
        yaxis=dict(gridcolor='#E2E8F0'),
        showlegend=False
    )
    
    st.plotly_chart(fig, use_container_width=True)


def pipeline_and_offers_panel(df_filtered):
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üîÑ Conversion Funnel")
        # Noms de colonnes selon votre Google Sheet (corrig√©)
        stages = ["Total_Leads", "Follow_ups", "Initial_msg_Sent", "Offers_Made", "Links_Sent", "Total_Closes"]
        pipeline_data = []
        stage_labels = []
        
        for s in stages:
            if s in df_filtered.columns:
                value = df_filtered[s].sum()
                pipeline_data.append(value)
                # Noms simplifi√©s pour l'affichage
                if s == "Total_Leads":
                    stage_labels.append("Leads")
                elif s == "Follow_ups":
                    stage_labels.append("Follow Ups")
                elif s == "Initial_msg_Sent":
                    stage_labels.append("Messages Sent")
                elif s == "Offers_Made":
                    stage_labels.append("Offers")
                elif s == "Links_Sent":
                    stage_labels.append("Links Sent")
                elif s == "Total_Closes":
                    stage_labels.append("Closed")
                else:
                    stage_labels.append(s.replace("_", " "))
        
        if pipeline_data:
            # Couleurs rouge/orange d√©grad√©es pour meilleure visibilit√©
            fig = go.Figure(go.Funnel(
                y=stage_labels,
                x=pipeline_data,
                textinfo="value+percent initial",
                marker=dict(
                    color=["#DC2626", "#EA580C", "#F59E0B", "#84CC16", "#10B981", "#06B6D4"],
                    line=dict(width=2, color="white")
                ),
                connector={"line": {"color": "#374151", "dash": "solid", "width": 2}}
            ))
            
            fig.update_layout(
                font=dict(size=12, color='#1F2937'),
                paper_bgcolor='rgba(0,0,0,0)',
                plot_bgcolor='rgba(0,0,0,0)',
                margin=dict(l=0, r=0, t=0, b=0)
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Pipeline data missing.")

    with col2:
        st.markdown("### üíº Revenue by Offer Type")
        # Noms de colonnes selon votre Google Sheet
        offers = ["First_Offer", "Upsell_Offer", "Downsell_Offer"]
        offer_data = []
        offer_labels = []
        
        for o in offers:
            if o in df_filtered.columns:
                value = df_filtered[o].sum()
                if value > 0:  # Afficher seulement si > 0
                    offer_data.append(value)
                    # Noms d'affichage plus propres
                    if o == "First_Offer":
                        offer_labels.append("First Offer")
                    elif o == "Upsell_Offer":
                        offer_labels.append("Upsell")
                    else:
                        offer_labels.append("Downsell")
        
        if offer_data:
            # Couleurs rouge/orange plus contrast√©es
            colors = ["#DC2626", "#EA580C", "#D97706"]
            
            df_offers = pd.DataFrame({
                "Offer": offer_labels,
                "Revenue": offer_data
            })
            
            fig = px.bar(df_offers, x="Offer", y="Revenue", text="Revenue",
                         color="Offer", 
                         color_discrete_sequence=colors)
            
            fig.update_traces(
                textposition="outside", 
                textfont_size=12,
                texttemplate='‚Ç¨%{text:,.0f}',
                marker_line_color='white',
                marker_line_width=2
            )
            fig.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='white',
                font=dict(color='#4A5568'),
